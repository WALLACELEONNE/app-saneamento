# Configurações adicionais para desenvolvimento
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  # Banco Oracle externo (IP: 172.16.10.224)
  # Não precisamos de container local - usando Oracle remoto

  # Cache Redis
  redis:
    image: redis:7.4-alpine
    container_name: saneamento-redis
    ports:
      - "6789:6789"
    volumes:
      - redis_data:/data
    networks:
      - saneamento-network
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6789", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --port 6789 --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    logging: *default-logging

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: saneamento-backend
    environment:
      # Configurações do banco Oracle
      ORACLE_USER: juparana
      ORACLE_PASSWORD: a8b692f78c
      ORACLE_HOST: 172.16.10.224
      ORACLE_PORT: 1521
      ORACLE_SERVICE: dbtest2
      
      # Configurações do Redis
      REDIS_HOST: redis
      REDIS_PORT: 6789
      REDIS_DB: 0
      
      # Configurações da aplicação
      ENVIRONMENT: development
      DEBUG: "true"
      LOG_LEVEL: DEBUG
      
      # Configurações de CORS
      CORS_ORIGINS: "http://localhost:8877,http://127.0.0.1:8877"
      
      # Configurações de cache
      CACHE_TTL: 300
      
      # Configurações de paginação
      DEFAULT_PAGE_SIZE: 50
      MAX_PAGE_SIZE: 1000
      
      # Configurações de rate limiting
      RATE_LIMIT_REQUESTS: 100
      RATE_LIMIT_WINDOW: 60
    ports:
      - "7700:7700"
    volumes:
      - ./backend:/app
      - backend_cache:/app/.cache
    networks:
      - saneamento-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Aguardando dependências...' &&
        sleep 10 &&
        echo 'Iniciando servidor de desenvolvimento...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 7700 --reload --log-level debug
      "
    logging: *default-logging

  # Frontend Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: saneamento-frontend
    environment:
      # URL da API
      NEXT_PUBLIC_API_URL: http://localhost:7700
      
      # Configurações do Next.js
      NODE_ENV: development
      NEXT_TELEMETRY_DISABLED: 1
      
      # Configurações de desenvolvimento
      WATCHPACK_POLLING: "true"
      CHOKIDAR_USEPOLLING: "true"
    ports:
      - "8877:8877"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - saneamento-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8877"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Iniciando servidor de desenvolvimento...' &&
        npm run dev -- --port 8877
      "
    logging: *default-logging

  # Nginx (Proxy reverso para produção)
  nginx:
    image: nginx:alpine
    container_name: saneamento-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - saneamento-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - production
    logging: *default-logging

  # Adminer (Interface web para banco de dados Oracle)
  adminer:
    image: adminer:latest
    container_name: saneamento-adminer
    environment:
      ADMINER_DEFAULT_SERVER: 172.16.10.224
      ADMINER_DESIGN: pepa-linha
    ports:
      - "8080:8080"
    networks:
      - saneamento-network
    profiles:
      - tools
    logging: *default-logging

  # Redis Commander (Interface web para Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: saneamento-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6789
      HTTP_USER: admin
      HTTP_PASSWORD: admin123
    ports:
      - "8081:8081"
    networks:
      - saneamento-network
    depends_on:
      - redis
    profiles:
      - tools
    logging: *default-logging

volumes:
  redis_data:
    driver: local
  backend_cache:
    driver: local
  nginx_logs:
    driver: local

networks:
  saneamento-network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.100.0/24
          gateway: 192.168.100.1

# Nota: Configurações de logging aplicadas diretamente nos serviços acima